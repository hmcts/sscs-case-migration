plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.springframework.boot' version '2.6.2'
  id 'org.owasp.dependencycheck' version '7.1.1'
  id 'com.github.ben-manes.versions' version '0.41.0'
  id 'org.sonarqube' version '3.3'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

allprojects {
  sourceCompatibility = '11'
  targetCompatibility = '11'
}

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << '-parameters' << '-Xlint:deprecation'
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.5.0"
  sourceSets = [sourceSets.main, sourceSets.test]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

task fortifyScan(type: JavaExec)  {
  main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

jacoco {
  toolVersion = "0.8.2"
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport
check.dependsOn integration
checkstyleMain.shouldRunAfter(compileJava)
test.shouldRunAfter(checkstyleTest)
integration.shouldRunAfter(checkstyleIntegrationTest)
integration.shouldRunAfter(test)

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: spring-boot-template"
    property "sonar.projectKey", "uk.gov.hmcts.reform:spring-boot-template"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

repositories {
  mavenLocal()
  mavenCentral()

  jcenter()

  maven { url 'https://jitpack.io' }

  maven {
    url 'https://repo.spring.io/libs-milestone'
  }
}

ext {
  reformLoggingVersion = "5.1.9"
  log4JVersion = '2.18.0'
}

ext {
  springCloudVersion = '2021.0.0'
}

dependencyManagement {
  dependencies {
    dependencySet(group: 'org.springframework', version: '5.3.22') {
      entry 'spring-aop'
      entry 'spring-aspects'
      entry 'spring-beans'
      entry 'spring-context'
      entry 'spring-context-support'
      entry 'spring-core'
      entry 'spring-expression'
      entry 'spring-jcl'
      entry 'spring-jdbc'
      entry 'spring-orm'
      entry 'spring-tx'
      entry 'spring-web'
      entry 'spring-webmvc'
      entry 'spring-jms'
      entry 'spring-messaging'
    }

    dependencySet(group: 'org.springframework.security', version: '5.7.2') {
      entry 'spring-security-crypto'
      entry 'spring-security-config'
      entry 'spring-security-core'
      entry 'spring-security-web'
    }


    dependencySet(group: 'com.fasterxml.jackson.core', version: '2.13.3') {
      entry 'jackson-databind'
    }

    dependencySet(group: 'commons-io', version: '2.11.0') {
      entry 'commons-io'
    }

    imports {
      mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
  }
}

dependencies {
  implementation('org.springframework.cloud:spring-cloud-starter-bootstrap')
  implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

  implementation 'com.github.hmcts.ccd-case-migration-starter:domain:3.0.0'
  implementation 'uk.gov.hmcts.reform.ccd-case-migration:processor:DEV-SNAPSHOT'
  implementation 'com.github.hmcts:sscs-common:4.25.3'
  implementation 'com.github.hmcts:idam-java-client:2.0.1'

  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.24'
  compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.24'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: reformLoggingVersion
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: reformLoggingVersion

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion

  testImplementation(platform('org.junit:junit-bom:5.8.2'))
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath
}

mainClassName = 'uk.gov.hmcts.reform.migration.CaseMigrationRunner'

bootJar {
  archiveFileName = "sscs-case-migration.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
